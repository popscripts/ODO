generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OpenDay {
  id        Int         @id @default(autoincrement())
  active    Boolean
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Classroom Classroom[]
  Info      Info[]
  Key       Key[]
  Order     Order[]
  User      User[]
}

model AccountType {
  id          Int    @id @default(autoincrement())
  accountType String @db.VarChar(16)
  User        User[]
}

model Classroom {
  id           Int       @id @default(autoincrement())
  openDay      OpenDay   @relation(fields: [openDayId], references: [id])
  openDayId    Int
  classroom    String    @db.VarChar(128)
  managedBy    User?     @relation("managed", fields: [managedById], references: [id])
  managedById  Int?
  title        String    @db.VarChar(128)
  description  String    @db.VarChar(500)
  status       Status    @relation(fields: [statusId], references: [id])
  statusId     Int       @default(1)
  reservedBy   User?     @relation(name: "reserved", fields: [reservedById], references: [id])
  reservedById Int?
  reservedAt   DateTime?
  takenBy      User?     @relation(name: "taken", fields: [takenById], references: [id])
  takenById    Int?
  takenAt      DateTime?
  deleted      Boolean   @default(false)
}

model Info {
  id        Int      @id @default(autoincrement())
  openDay   OpenDay  @relation(fields: [openDayId], references: [id])
  openDayId Int
  content   String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Key {
  id        Int      @id @default(autoincrement())
  openDay   OpenDay  @relation(fields: [openDayId], references: [id])
  openDayId Int
  key       Int      @unique
  expired   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          Int      @id @default(autoincrement())
  openDay     OpenDay  @relation(fields: [openDayId], references: [id])
  openDayId   Int
  order       String   @db.VarChar(255)
  status      Status   @relation(fields: [statusId], references: [id])
  statusId    Int      @default(4)
  orderedBy   User     @relation("orders", fields: [orderedById], references: [id])
  orderedById Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Status {
  id        Int         @id @default(autoincrement())
  status    String      @db.VarChar(16)
  Order     Order[]
  Classroom Classroom[]
}

model User {
  id                Int         @id @default(autoincrement())
  openDay           OpenDay     @relation(fields: [openDayId], references: [id])
  openDayId         Int
  accountType       AccountType @relation(fields: [accountTypeId], references: [id])
  accountTypeId     Int         @default(2)
  username          String      @unique @db.VarChar(64)
  password          String      @db.VarChar(255)
  pictureName       String?     @db.VarChar(255)
  active            Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  Order             Order[]     @relation("orders")
  ManagedClassroom  Classroom[] @relation("managed")
  ReservedClassroom Classroom[] @relation("reserved")
  TakenClassroom    Classroom[] @relation("taken")
}
